{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T20:21:52.708Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T20:21:52.709Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:21:52.709Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T20:23:55.505Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T20:23:55.506Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:23:55.506Z"}
{"level":"error","message":"__SERVER_ERROR__ PORT variable is not configured","timestamp":"2017-12-06T20:23:55.558Z"}
{"level":"error","message":"__SERVER_ERROR__ server is already off","timestamp":"2017-12-06T20:23:55.577Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T20:24:33.989Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T20:24:33.990Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:24:33.990Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T20:24:34.072Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T20:24:34.090Z"}
{"level":"info","message":"__REQUEST_ERROR","timestamp":"2017-12-06T20:24:34.091Z"}
{"message":"Cannot read property 'indexOf' of undefined","stack":"TypeError: Cannot read property 'indexOf' of undefined\n    at IncomingMessage.request.on (/home/vladimirsan/workspace/seattle-javascript-401d19/08-rest/02-rest-server/lib/request-parser.js:33:44)\n    at emitNone (events.js:105:13)\n    at IncomingMessage.emit (events.js:207:7)\n    at endReadableNT (_stream_readable.js:1059:12)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)","level":"info","timestamp":"2017-12-06T20:24:34.091Z"}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T20:25:56.869Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T20:25:56.870Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:25:56.870Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T20:25:56.938Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T20:25:56.957Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T20:25:56.958Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:25:56.958Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T20:25:56.959Z"}
{"id":"aa59f6f0-dac3-11e7-b7f0-5f6f34a44179","timestamp":"2017-12-06T20:25:56.959Z","title":"cats","content":"Gregor and The Hound","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T20:27:22.930Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T20:27:22.931Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:27:22.931Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T20:27:22.990Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T20:27:23.010Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T20:27:23.012Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:27:23.012Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T20:27:23.013Z"}
{"id":"dda49c40-dac3-11e7-a881-8dea9a494de2","timestamp":"2017-12-06T20:27:23.013Z","title":"cats","content":"Gregor and The Hound","level":"info","message":""}
{"level":"info","message":"Adding a POST url and callback","timestamp":"2017-12-06T20:27:34.920Z"}
{"level":"info","message":"/api/notes","timestamp":"2017-12-06T20:27:34.920Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:27:34.921Z"}
{"level":"info","message":"Server is online on port 3000","timestamp":"2017-12-06T20:27:34.992Z"}
{"level":"info","message":"Routing a Request","timestamp":"2017-12-06T20:27:35.016Z"}
{"level":"info","message":"Found the following handler","timestamp":"2017-12-06T20:27:35.017Z"}
{"level":"info","message":"(request, response) => {/* istanbul ignore next */cov_2dlcyp9wvq.f[2]++;cov_2dlcyp9wvq.s[16]++;\n  // Here, I know that my request has been pre-parsed\n  if (!request.body) {/* istanbul ignore next */cov_2dlcyp9wvq.b[0][0]++;cov_2dlcyp9wvq.s[17]++;\n    sendStatus(response, 400, 'body not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[18]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[0][1]++;}cov_2dlcyp9wvq.s[19]++;\n  if (!request.body.title) {/* istanbul ignore next */cov_2dlcyp9wvq.b[1][0]++;cov_2dlcyp9wvq.s[20]++;\n    sendStatus(response, 400, 'title not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[21]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[1][1]++;}cov_2dlcyp9wvq.s[22]++;\n  if (!request.body.content) {/* istanbul ignore next */cov_2dlcyp9wvq.b[2][0]++;cov_2dlcyp9wvq.s[23]++;\n    sendStatus(response, 400, 'content not found'); /* istanbul ignore next */cov_2dlcyp9wvq.s[24]++;\n    return;\n  } else /* istanbul ignore next */{cov_2dlcyp9wvq.b[2][1]++;}\n  // Here, I can create my note since all test pass\n  let note = /* istanbul ignore next */(cov_2dlcyp9wvq.s[25]++, new Note(request.body.title, request.body.content)); /* istanbul ignore next */cov_2dlcyp9wvq.s[26]++;\n  notes.push(note); /* istanbul ignore next */cov_2dlcyp9wvq.s[27]++;\n  sendJSON(response, 200, note);\n}","timestamp":"2017-12-06T20:27:35.017Z"}
{"level":"info","message":"Responding with a 200 code and the following data","timestamp":"2017-12-06T20:27:35.018Z"}
{"id":"e4cc94a0-dac3-11e7-9ae5-19c7a3a8a6ce","timestamp":"2017-12-06T20:27:35.018Z","title":"cats","content":"Gregor and The Hound","level":"info","message":""}
